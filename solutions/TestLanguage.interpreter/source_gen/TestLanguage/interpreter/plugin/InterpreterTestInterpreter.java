package TestLanguage.interpreter.plugin;

/*Generated by MPS */

import com.mbeddr.mpsutil.interpreter.rt.InterpreterBase;
import java.util.List;
import com.mbeddr.mpsutil.interpreter.rt.IEvaluator;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import com.mbeddr.mpsutil.interpreter.rt.ConceptEvaluatorBase;
import org.jetbrains.mps.openapi.model.SNode;
import com.mbeddr.mpsutil.interpreter.rt.IContext;
import com.mbeddr.mpsutil.interpreter.rt.ICoverageAnalyzer;
import com.mbeddr.mpsutil.interpreter.rt.ComputationTrace;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import com.mbeddr.mpsutil.interpreter.rt.StopAndReturnException;
import com.mbeddr.mpsutil.interpreter.rt.InterpreterEscapeException;
import com.mbeddr.mpsutil.interpreter.rt.InterpreterRuntimeException;
import com.mbeddr.mpsutil.interpreter.rt.EvaluatorInfo;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import NewLang.interpreter.plugin.EvalHelper;
import NewLang.behavior.Expression__BehaviorDescriptor;
import com.mbeddr.mpsutil.interpreter.rt.ITypeMapper;
import com.mbeddr.mpsutil.interpreter.rt.IRelationship;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class InterpreterTestInterpreter extends InterpreterBase {
  public InterpreterTestInterpreter() {
    init();
  }

  protected void populateEvaluators(List<? extends IEvaluator> evaluators) {
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.TestSuite$Vj, "r:13776e3c-aa04-403b-b07b-3f1eded09623(TestLanguage.interpreter.plugin)/8125040446632159417", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          return SPropertyOperations.getString(node, PROPS.name$MnvL);
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("TestSuite()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("TestSuite");
      }

      @Override
      public String toString() {
        return "TestSuite";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.AssertStatement$yi, "r:13776e3c-aa04-403b-b07b-3f1eded09623(TestLanguage.interpreter.plugin)/6412955323903036815", false) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          return SLinkOperations.getTarget(node, LINKS.exp$7mzP);
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("assert()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("AssertStatement");
      }

      @Override
      public String toString() {
        return "AssertStatement";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.EqualExpression$JF, "r:13776e3c-aa04-403b-b07b-3f1eded09623(TestLanguage.interpreter.plugin)/6412955323903057581", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          Object result = EvalHelper.eval(SLinkOperations.getTarget(node, LINKS.left$VSk_));
          int res = Integer.valueOf(String.valueOf(result));
          if (res == (int) Expression__BehaviorDescriptor.value_id2K_E7Ic1fcQ.invoke(SLinkOperations.getTarget(node, LINKS.right$VSMB))) {
            return 1;
          }
          return 0;
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("==()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("EqualExpression");
      }

      @Override
      public String toString() {
        return "EqualExpression";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
  }


  protected void populateTypeMappers(List<? extends ITypeMapper> typeMappers) {
  }



  protected void populateRelationships(List<? extends IRelationship> relationships) {
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept TestSuite$Vj = MetaAdapterFactory.getConcept(0xe1e1e1ca38f54b3aL, 0xbc4e629f7e2e7b1bL, 0x3d8a40f9803499d4L, "TestLanguage.structure.TestSuite");
    /*package*/ static final SConcept AssertStatement$yi = MetaAdapterFactory.getConcept(0xe1e1e1ca38f54b3aL, 0xbc4e629f7e2e7b1bL, 0x3d8a40f98038c4f6L, "TestLanguage.structure.AssertStatement");
    /*package*/ static final SConcept EqualExpression$JF = MetaAdapterFactory.getConcept(0x82c3f21d731742c2L, 0xa9382fa615afecaaL, 0x51b29a29f71ef955L, "NewLang.structure.EqualExpression");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink exp$7mzP = MetaAdapterFactory.getContainmentLink(0xe1e1e1ca38f54b3aL, 0xbc4e629f7e2e7b1bL, 0x3d8a40f98038c4f6L, 0x3d8a40f98038c4f9L, "exp");
    /*package*/ static final SContainmentLink left$VSk_ = MetaAdapterFactory.getContainmentLink(0x82c3f21d731742c2L, 0xa9382fa615afecaaL, 0x2bba03e50417871dL, 0x2bba03e504179b0cL, "left");
    /*package*/ static final SContainmentLink right$VSMB = MetaAdapterFactory.getContainmentLink(0x82c3f21d731742c2L, 0xa9382fa615afecaaL, 0x2bba03e50417871dL, 0x2bba03e504179b0eL, "right");
  }
}
