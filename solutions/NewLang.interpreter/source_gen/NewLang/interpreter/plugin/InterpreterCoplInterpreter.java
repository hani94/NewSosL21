package NewLang.interpreter.plugin;

/*Generated by MPS */

import com.mbeddr.mpsutil.interpreter.rt.InterpreterBase;
import java.util.List;
import com.mbeddr.mpsutil.interpreter.rt.IEvaluator;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import com.mbeddr.mpsutil.interpreter.rt.ConceptEvaluatorBase;
import org.jetbrains.mps.openapi.model.SNode;
import com.mbeddr.mpsutil.interpreter.rt.IContext;
import com.mbeddr.mpsutil.interpreter.rt.ICoverageAnalyzer;
import com.mbeddr.mpsutil.interpreter.rt.ComputationTrace;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import NewLang.behavior.Expression__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import com.mbeddr.mpsutil.interpreter.rt.StopAndReturnException;
import com.mbeddr.mpsutil.interpreter.rt.InterpreterEscapeException;
import com.mbeddr.mpsutil.interpreter.rt.InterpreterRuntimeException;
import com.mbeddr.mpsutil.interpreter.rt.EvaluatorInfo;
import com.mbeddr.mpsutil.interpreter.rt.ITypeMapper;
import com.mbeddr.mpsutil.interpreter.rt.IRelationship;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class InterpreterCoplInterpreter extends InterpreterBase {
  public InterpreterCoplInterpreter() {
    init();
  }

  protected void populateEvaluators(List<? extends IEvaluator> evaluators) {
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.PlusExpression$SW, "r:8488ed2b-5526-4439-bd1b-c7e8ebf151c3(NewLang.interpreter.plugin)/3181133960390701822", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          return (int) Expression__BehaviorDescriptor.IntValue_id2K_E7Ic1fcQ.invoke(SLinkOperations.getTarget(node, LINKS.left$VSk_)) + (int) Expression__BehaviorDescriptor.IntValue_id2K_E7Ic1fcQ.invoke(SLinkOperations.getTarget(node, LINKS.right$VSMB));
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("+()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("PlusExpression");
      }

      @Override
      public String toString() {
        return "PlusExpression";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.MinusExpression$G2, "r:8488ed2b-5526-4439-bd1b-c7e8ebf151c3(NewLang.interpreter.plugin)/3181133960390717061", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          return (int) Expression__BehaviorDescriptor.IntValue_id2K_E7Ic1fcQ.invoke(SLinkOperations.getTarget(node, LINKS.left$VSk_)) - (int) Expression__BehaviorDescriptor.IntValue_id2K_E7Ic1fcQ.invoke(SLinkOperations.getTarget(node, LINKS.right$VSMB));
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("-()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("MinusExpression");
      }

      @Override
      public String toString() {
        return "MinusExpression";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.DivExpression$2u, "r:8488ed2b-5526-4439-bd1b-c7e8ebf151c3(NewLang.interpreter.plugin)/3181133960390718930", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          return (int) Expression__BehaviorDescriptor.IntValue_id2K_E7Ic1fcQ.invoke(SLinkOperations.getTarget(node, LINKS.left$VSk_)) / (int) Expression__BehaviorDescriptor.IntValue_id2K_E7Ic1fcQ.invoke(SLinkOperations.getTarget(node, LINKS.right$VSMB));
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("/()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("DivExpression");
      }

      @Override
      public String toString() {
        return "DivExpression";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.MulExpression$D1, "r:8488ed2b-5526-4439-bd1b-c7e8ebf151c3(NewLang.interpreter.plugin)/3181133960390720384", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          return (int) Expression__BehaviorDescriptor.IntValue_id2K_E7Ic1fcQ.invoke(SLinkOperations.getTarget(node, LINKS.left$VSk_)) * (int) Expression__BehaviorDescriptor.IntValue_id2K_E7Ic1fcQ.invoke(SLinkOperations.getTarget(node, LINKS.right$VSMB));
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("*()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("MulExpression");
      }

      @Override
      public String toString() {
        return "MulExpression";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.NotEqualExpression$Wh, "r:8488ed2b-5526-4439-bd1b-c7e8ebf151c3(NewLang.interpreter.plugin)/8125040446632163309", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          return (int) Expression__BehaviorDescriptor.IntValue_id2K_E7Ic1fcQ.invoke(SLinkOperations.getTarget(node, LINKS.left$VSk_)) != (int) Expression__BehaviorDescriptor.IntValue_id2K_E7Ic1fcQ.invoke(SLinkOperations.getTarget(node, LINKS.right$VSMB));
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("!=()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("NotEqualExpression");
      }

      @Override
      public String toString() {
        return "NotEqualExpression";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.LowerToExpression$KD, "r:8488ed2b-5526-4439-bd1b-c7e8ebf151c3(NewLang.interpreter.plugin)/8125040446632422886", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          return (int) Expression__BehaviorDescriptor.IntValue_id2K_E7Ic1fcQ.invoke(SLinkOperations.getTarget(node, LINKS.left$VSk_)) < (int) Expression__BehaviorDescriptor.IntValue_id2K_E7Ic1fcQ.invoke(SLinkOperations.getTarget(node, LINKS.right$VSMB));
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("<()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("LowerToExpression");
      }

      @Override
      public String toString() {
        return "LowerToExpression";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.LowerEqualExpression$LB, "r:8488ed2b-5526-4439-bd1b-c7e8ebf151c3(NewLang.interpreter.plugin)/8125040446632437939", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          return (int) Expression__BehaviorDescriptor.IntValue_id2K_E7Ic1fcQ.invoke(SLinkOperations.getTarget(node, LINKS.left$VSk_)) <= (int) Expression__BehaviorDescriptor.IntValue_id2K_E7Ic1fcQ.invoke(SLinkOperations.getTarget(node, LINKS.right$VSMB));
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("<=()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("LowerEqualExpression");
      }

      @Override
      public String toString() {
        return "LowerEqualExpression";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.EqualExpression$JF, "r:8488ed2b-5526-4439-bd1b-c7e8ebf151c3(NewLang.interpreter.plugin)/8125040446632455422", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          return (int) Expression__BehaviorDescriptor.IntValue_id2K_E7Ic1fcQ.invoke(SLinkOperations.getTarget(node, LINKS.left$VSk_)) == (int) Expression__BehaviorDescriptor.IntValue_id2K_E7Ic1fcQ.invoke(SLinkOperations.getTarget(node, LINKS.right$VSMB));
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException("==()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("EqualExpression");
      }

      @Override
      public String toString() {
        return "EqualExpression";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.GreaterThanExpression$Ka, "r:8488ed2b-5526-4439-bd1b-c7e8ebf151c3(NewLang.interpreter.plugin)/8125040446632460143", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          return (int) Expression__BehaviorDescriptor.IntValue_id2K_E7Ic1fcQ.invoke(SLinkOperations.getTarget(node, LINKS.left$VSk_)) > (int) Expression__BehaviorDescriptor.IntValue_id2K_E7Ic1fcQ.invoke(SLinkOperations.getTarget(node, LINKS.right$VSMB));
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException(">()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("GreaterThanExpression");
      }

      @Override
      public String toString() {
        return "GreaterThanExpression";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
    ListSequence.fromList(((List<IEvaluator>) evaluators)).addElement(new ConceptEvaluatorBase(CONCEPTS.GreaterEqualExpression$L8, "r:8488ed2b-5526-4439-bd1b-c7e8ebf151c3(NewLang.interpreter.plugin)/8125040446632461891", true) {
      public Object evaluateEvaluator(SNode node, IContext context, ICoverageAnalyzer coverage, ComputationTrace trace) {
        try {
          coverage.visitedEvaluator(this);
          coverage.visitedConcept(this.concept);
          coverage.visitedConcept(SNodeOperations.getConcept(node));
          return (int) Expression__BehaviorDescriptor.IntValue_id2K_E7Ic1fcQ.invoke(SLinkOperations.getTarget(node, LINKS.left$VSk_)) >= (int) Expression__BehaviorDescriptor.IntValue_id2K_E7Ic1fcQ.invoke(SLinkOperations.getTarget(node, LINKS.right$VSMB));
        } catch (StopAndReturnException stop) {
          return stop.value();
        } catch (InterpreterEscapeException ex) {
          throw ex;
        } catch (RuntimeException ex) {
          throw new InterpreterRuntimeException(">=()", node, ex, trace);
        }
      }
      public EvaluatorInfo getInfo() {
        return new EvaluatorInfo("GreaterEqualExpression");
      }

      @Override
      public String toString() {
        return "GreaterEqualExpression";
      }

      @Override
      public boolean canLookupBeCached() {
        return true;
      }
    });
  }


  protected void populateTypeMappers(List<? extends ITypeMapper> typeMappers) {
  }



  protected void populateRelationships(List<? extends IRelationship> relationships) {
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink right$VSMB = MetaAdapterFactory.getContainmentLink(0x82c3f21d731742c2L, 0xa9382fa615afecaaL, 0x2bba03e50417871dL, 0x2bba03e504179b0eL, "right");
    /*package*/ static final SContainmentLink left$VSk_ = MetaAdapterFactory.getContainmentLink(0x82c3f21d731742c2L, 0xa9382fa615afecaaL, 0x2bba03e50417871dL, 0x2bba03e504179b0cL, "left");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept PlusExpression$SW = MetaAdapterFactory.getConcept(0x82c3f21d731742c2L, 0xa9382fa615afecaaL, 0x2bba03e50417da21L, "NewLang.structure.PlusExpression");
    /*package*/ static final SConcept MinusExpression$G2 = MetaAdapterFactory.getConcept(0x82c3f21d731742c2L, 0xa9382fa615afecaaL, 0x2bba03e50417e568L, "NewLang.structure.MinusExpression");
    /*package*/ static final SConcept DivExpression$2u = MetaAdapterFactory.getConcept(0x82c3f21d731742c2L, 0xa9382fa615afecaaL, 0x2bba03e5041803c2L, "NewLang.structure.DivExpression");
    /*package*/ static final SConcept MulExpression$D1 = MetaAdapterFactory.getConcept(0x82c3f21d731742c2L, 0xa9382fa615afecaaL, 0x2bba03e50417f990L, "NewLang.structure.MulExpression");
    /*package*/ static final SConcept NotEqualExpression$Wh = MetaAdapterFactory.getConcept(0x82c3f21d731742c2L, 0xa9382fa615afecaaL, 0x51b29a29f71ef95aL, "NewLang.structure.NotEqualExpression");
    /*package*/ static final SConcept LowerToExpression$KD = MetaAdapterFactory.getConcept(0x82c3f21d731742c2L, 0xa9382fa615afecaaL, 0x51b29a29f71ef957L, "NewLang.structure.LowerToExpression");
    /*package*/ static final SConcept LowerEqualExpression$LB = MetaAdapterFactory.getConcept(0x82c3f21d731742c2L, 0xa9382fa615afecaaL, 0x51b29a29f71ef959L, "NewLang.structure.LowerEqualExpression");
    /*package*/ static final SConcept EqualExpression$JF = MetaAdapterFactory.getConcept(0x82c3f21d731742c2L, 0xa9382fa615afecaaL, 0x51b29a29f71ef955L, "NewLang.structure.EqualExpression");
    /*package*/ static final SConcept GreaterThanExpression$Ka = MetaAdapterFactory.getConcept(0x82c3f21d731742c2L, 0xa9382fa615afecaaL, 0x51b29a29f71ef956L, "NewLang.structure.GreaterThanExpression");
    /*package*/ static final SConcept GreaterEqualExpression$L8 = MetaAdapterFactory.getConcept(0x82c3f21d731742c2L, 0xa9382fa615afecaaL, 0x51b29a29f71ef958L, "NewLang.structure.GreaterEqualExpression");
  }
}
