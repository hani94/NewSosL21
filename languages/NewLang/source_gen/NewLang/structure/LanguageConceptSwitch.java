package NewLang.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int BBooleanType = 0;
  public static final int BIntegerType = 1;
  public static final int BaseType = 2;
  public static final int BinaryExpression = 3;
  public static final int BooleanLiteral = 4;
  public static final int DivExpression = 5;
  public static final int EmptyStatement = 6;
  public static final int ExpStatement = 7;
  public static final int Expression = 8;
  public static final int IntegerLiteral = 9;
  public static final int Istatement = 10;
  public static final int Main = 11;
  public static final int MinusExpression = 12;
  public static final int MulExpression = 13;
  public static final int PlusExpression = 14;
  public static final int StatementContainer = 15;
  public static final int Variable = 16;
  public static final int VariableReference = 17;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x82c3f21d731742c2L, 0xa9382fa615afecaaL);
    builder.put(0x3d8a40f980199c23L, BBooleanType);
    builder.put(0x3d8a40f980199c22L, BIntegerType);
    builder.put(0x3d8a40f980199c14L, BaseType);
    builder.put(0x2bba03e50417871dL, BinaryExpression);
    builder.put(0xe7bf19b9812c481L, BooleanLiteral);
    builder.put(0x2bba03e5041803c2L, DivExpression);
    builder.put(0x9729f9cf414b63dL, EmptyStatement);
    builder.put(0x2bba03e5041c9566L, ExpStatement);
    builder.put(0x2bba03e504172933L, Expression);
    builder.put(0x9729f9cf4175702L, IntegerLiteral);
    builder.put(0x9729f9cf414b638L, Istatement);
    builder.put(0x1686c41a5d838c0eL, Main);
    builder.put(0x2bba03e50417e568L, MinusExpression);
    builder.put(0x2bba03e50417f990L, MulExpression);
    builder.put(0x2bba03e50417da21L, PlusExpression);
    builder.put(0x3d8a40f98056a6f4L, StatementContainer);
    builder.put(0x9729f9cf414ac3aL, Variable);
    builder.put(0x3d8a40f9803cffa2L, VariableReference);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
