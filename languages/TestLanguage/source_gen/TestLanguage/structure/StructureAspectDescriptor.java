package TestLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAssertStatement = createDescriptorForAssertStatement();
  /*package*/ final ConceptDescriptor myConceptTestCase = createDescriptorForTestCase();
  /*package*/ final ConceptDescriptor myConceptTestSuite = createDescriptorForTestSuite();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
    deps.aggregatedLanguage(0x82c3f21d731742c2L, 0xa9382fa615afecaaL, "NewLang");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAssertStatement, myConceptTestCase, myConceptTestSuite);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.AssertStatement:
        return myConceptAssertStatement;
      case LanguageConceptSwitch.TestCase:
        return myConceptTestCase;
      case LanguageConceptSwitch.TestSuite:
        return myConceptTestSuite;
      default:
        return null;
    }
  }


  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAssertStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("TestLanguage", "AssertStatement", 0xe1e1e1ca38f54b3aL, 0xbc4e629f7e2e7b1bL, 0x3d8a40f98038c4f6L);
    b.class_(false, false, false);
    b.parent(0x82c3f21d731742c2L, 0xa9382fa615afecaaL, 0x9729f9cf414b638L);
    b.origin("r:dc730a7c-7762-464e-9715-6f8a9bb39c74(TestLanguage.structure)/4434428223441913078");
    b.version(2);
    b.aggregate("exp", 0x3d8a40f98038c4f9L).target(0x82c3f21d731742c2L, 0xa9382fa615afecaaL, 0x2bba03e504172933L).optional(false).ordered(true).multiple(false).origin("4434428223441913081").done();
    b.alias("assert");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTestCase() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("TestLanguage", "TestCase", 0xe1e1e1ca38f54b3aL, 0xbc4e629f7e2e7b1bL, 0x3d8a40f9803499d7L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:dc730a7c-7762-464e-9715-6f8a9bb39c74(TestLanguage.structure)/4434428223441639895");
    b.version(2);
    b.aggregate("content", 0x3d8a40f980349a2dL).target(0x82c3f21d731742c2L, 0xa9382fa615afecaaL, 0x9729f9cf414b638L).optional(true).ordered(true).multiple(true).origin("4434428223441639981").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTestSuite() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("TestLanguage", "TestSuite", 0xe1e1e1ca38f54b3aL, 0xbc4e629f7e2e7b1bL, 0x3d8a40f9803499d4L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:dc730a7c-7762-464e-9715-6f8a9bb39c74(TestLanguage.structure)/4434428223441639892");
    b.version(2);
    b.aggregate("tests", 0x3d8a40f9803499daL).target(0xe1e1e1ca38f54b3aL, 0xbc4e629f7e2e7b1bL, 0x3d8a40f9803499d7L).optional(true).ordered(true).multiple(true).origin("4434428223441639898").done();
    return b.create();
  }
}
