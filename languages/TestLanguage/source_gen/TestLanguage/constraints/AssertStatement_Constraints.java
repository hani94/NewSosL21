package TestLanguage.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintFunction;
import jetbrains.mps.smodel.runtime.ConstraintContext_CanBeChild;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AssertStatement_Constraints extends BaseConstraintsDescriptor {
  public AssertStatement_Constraints() {
    super(CONCEPTS.AssertStatement$yi);
  }

  @Override
  protected ConstraintFunction<ConstraintContext_CanBeChild, Boolean> calculateCanBeChildConstraint() {
    return new ConstraintFunction<ConstraintContext_CanBeChild, Boolean>() {
      @NotNull
      public Boolean invoke(@NotNull ConstraintContext_CanBeChild context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = staticCanBeAChild(context.getNode(), context.getParentNode(), context.getConcept(), context.getLink());

        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
        }

        return result;
      }
    };
  }
  private static boolean staticCanBeAChild(SNode node, SNode parentNode, SAbstractConcept childConcept, SContainmentLink link) {
    return SNodeOperations.isInstanceOf(parentNode, CONCEPTS.TestCase$WK);
  }
  private static final SNodePointer canBeChildBreakingPoint = new SNodePointer("r:2eab40aa-5755-4f29-8eda-aa378ed13ce0(TestLanguage.constraints)", "4434428223442054781");

  private static final class CONCEPTS {
    /*package*/ static final SConcept AssertStatement$yi = MetaAdapterFactory.getConcept(0xe1e1e1ca38f54b3aL, 0xbc4e629f7e2e7b1bL, 0x3d8a40f98038c4f6L, "TestLanguage.structure.AssertStatement");
    /*package*/ static final SConcept TestCase$WK = MetaAdapterFactory.getConcept(0xe1e1e1ca38f54b3aL, 0xbc4e629f7e2e7b1bL, 0x3d8a40f9803499d7L, "TestLanguage.structure.TestCase");
  }
}
